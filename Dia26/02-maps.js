// Los Maps (no confundir con el m√©todo map de los arrays) en JavaScript son estructuras de datos 
// que permiten almacenar pares clave-valor y acceder a ellos de manera eficiente. 
// A diferencia de los objetos regulares, las claves en un Map pueden ser de cualquier tipo de dato, 
// incluyendo objetos, funciones y valores primitivos. Los Maps son especialmente √∫tiles cuando se necesitan realizar b√∫squedas r√°pidas de valores asociados a una clave determinada.

// Para crear un Map, se puede utilizar la siguiente sintaxis:

let map_2 = new Map();

// Tambi√©n es posible crear un Map a partir de un arreglo de pares clave-valor:

let array = [["key1", "value1"], ["key2", "value2"]];
let map_1 = new Map(array);
console.log(map_1);

// Los m√©todos m√°s utilizados de los Maps son los siguientes:

// set(key, value): este m√©todo agrega un par clave-valor al Map.
// get(key): este m√©todo devuelve el valor asociado a una clave determinada. Si la clave no existe, devuelve undefined.
// has(key): este m√©todo verifica si una clave determinada existe en el Map. Devuelve true si la clave existe y false en caso contrario.
// delete(key): este m√©todo elimina una clave y su valor asociado del Map.
// clear(): este m√©todo vac√≠a completamente el Map.
// size: este atributo devuelve la cantidad de pares clave-valor que existen en el Map.

// Ejemplos de uso de Map üëá:

let map = new Map();

// Agregar pares clave-valor al Map
map.set("key1", "value1");
map.set("key2", "value2");
map.set(3, "value3");
console.log(map);

// Obtener el valor asociado a una clave
console.log(map.get("key1")); // Output: "value1"

// Verificar si una clave existe en el Map
console.log(map.has("key2")); // Output: true

// Eliminar una clave del Map
map.delete("key2");
console.log(map);

// Verificar si una clave existe en el Map despu√©s de ser eliminada
console.log(map.has("key2")); // Output: false

// Vaciar el Map
map.clear();
console.log(map);

// Verificar el tama√±o del Map despu√©s de ser vaciado
console.log(map.size); // Output: 0


// En resumen, los Maps en JavaScript son estructuras de datos √∫tiles para almacenar pares clave-valor
//  y para realizar operaciones eficientes de b√∫squeda, adici√≥n y eliminaci√≥n de valores asociados a una clave determinada.